;
; File generated by cc65 v 2.18 - Git 5cbbb459
;
	.fopt		compiler,"cc65 v 2.18 - Git 5cbbb459"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_rand8
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_write
	.import		_set_vram_buffer
	.import		_clear_vram_buffer
	.export		_i
	.export		_ix
	.export		_iy
	.export		_pos
	.export		_src
	.export		_dest
	.export		_clr
	.export		_text
	.export		_WIDTH
	.export		_HEIGHT
	.export		_scr
	.export		_palette
	.export		_draw_bg
	.export		_update_bg
	.export		_main

.segment	"DATA"

_scr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06

.segment	"RODATA"

_text:
	.byte	$48,$61,$69,$6C,$20,$53,$61,$74,$61,$6E,$21,$00
_WIDTH:
	.byte	$10
_HEIGHT:
	.byte	$0F
_palette:
	.byte	$0F
	.byte	$27
	.byte	$38
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_ix:
	.res	1,$00
_iy:
	.res	1,$00
_pos:
	.res	1,$00
_src:
	.res	1,$00
_dest:
	.res	1,$00
_clr:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; clear_vram_buffer(); // resets the index to zero, to start filling the buffer
;
	jsr     _clear_vram_buffer
;
; vram_adr(NAMETABLE_A); // start in the top left corner
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for(iy=0; iy < HEIGHT; ++iy) {
;
	lda     #$00
	sta     _iy
	tax
L0167:	lda     _iy
	cmp     _HEIGHT
	txa
	sbc     #$00
	bcs     L0138
;
; for(i = 0; i < 2; ++i) {
;
	lda     #$00
	sta     _i
	tax
L0168:	lda     _i
	cmp     #$02
	bcs     L016B
;
; for(ix=0; ix < WIDTH; ++ix) {
;
	lda     #$00
	sta     _ix
	tax
L0169:	lda     _ix
	cmp     _WIDTH
	bcs     L016A
;
; pos = (iy << 4) + ix;
;
	lda     _iy
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _ix
	sta     _pos
;
; vram_put(scr[pos]);
;
	ldy     _pos
	lda     _scr,y
	jsr     _vram_put
;
; vram_put(scr[pos]);
;
	ldy     _pos
	lda     _scr,y
	jsr     _vram_put
;
; for(ix=0; ix < WIDTH; ++ix) {
;
	ldx     #$00
	inc     _ix
	jmp     L0169
;
; for(i = 0; i < 2; ++i) {
;
L016A:	inc     _i
	jmp     L0168
;
; for(iy=0; iy < HEIGHT; ++iy) {
;
L016B:	inc     _iy
	jmp     L0167
;
; vram_adr(NTADR_A(10,14)); // screen is 32 x 30 tiles
;
L0138:	ldx     #$21
	lda     #$CA
	jsr     _vram_adr
;
; vram_write(text,sizeof(text));
;
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$0C
	jsr     _vram_write
;
; ppu_on_all(); //  turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ update_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_bg: near

.segment	"CODE"

;
; for(i = 223; i > 0; --i) {
;
	lda     #$DF
	sta     _i
L016F:	lda     _i
	beq     L0114
;
; src = scr[i + WIDTH];
;
	ldx     #$00
	lda     _i
	clc
	adc     _WIDTH
	bcc     L016C
	inx
L016C:	sta     ptr1
	txa
	clc
	adc     #>(_scr)
	sta     ptr1+1
	ldy     #<(_scr)
	lda     (ptr1),y
	sta     _src
;
; if(rand8() > 64) {
;
	jsr     _rand8
	cmp     #$41
	bcc     L0170
;
; dest = i - 1;
;
	lda     _i
	sec
	sbc     #$01
;
; } else {
;
	jmp     L016D
;
; dest = i;
;
L0170:	lda     _i
L016D:	sta     _dest
;
; if(rand8() > 64) {
;
	jsr     _rand8
	cmp     #$41
	bcc     L0171
;
; clr = src - 1;
;
	lda     _src
	sec
	sbc     #$01
;
; } else {
;
	jmp     L016E
;
; clr = src;
;
L0171:	lda     _src
L016E:	sta     _clr
;
; scr[dest] = clr;
;
	ldy     _dest
	lda     _clr
	sta     _scr,y
;
; for(i = 223; i > 0; --i) {
;
	dec     _i
	jmp     L016F
;
; }
;
L0114:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; pal_bg(palette); //  load the BG palette
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; ppu_on_all(); //  turn on screen
;
	jsr     _ppu_on_all
;
; clear_vram_buffer(); // resets the index to zero, to start filling the buffer
;
	jsr     _clear_vram_buffer
;
; ppu_wait_nmi(); // wait
;
L010B:	jsr     _ppu_wait_nmi
;
; update_bg();
;
	jsr     _update_bg
;
; draw_bg();
;
	jsr     _draw_bg
;
; while(1) {
;
	jmp     L010B

.endproc

